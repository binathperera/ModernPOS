/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.modernPOS.view;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.modernPOS.controller.CustomerController;
import lk.modernPOS.controller.ItemController;
import lk.modernPOS.controller.OrderController;
import lk.modernPOS.dto.CustomDTO;
import lk.modernPOS.dto.CustomerDTO;
import lk.modernPOS.dto.ItemDTO;

/**
 *
 * @author Binath Perera
 */
public class PlaceOrderPannel extends javax.swing.JPanel {

    /**
     * Creates new form PlaceOrderPannel
     */
    public PlaceOrderPannel() {
       
        initComponents();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        cusIdLabel = new javax.swing.JLabel();
        cusNameLabel = new javax.swing.JLabel();
        customerIdComboBox = new javax.swing.JComboBox();
        customerNameText = new javax.swing.JTextField();
        orderIdLabel = new javax.swing.JLabel();
        orderIdText = new javax.swing.JTextField();
        orderDateLabel = new javax.swing.JLabel();
        orderDateText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderDetailTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        itemCodeComboBox = new javax.swing.JComboBox();
        itemDescriptionText = new javax.swing.JTextField();
        qtyText = new javax.swing.JTextField();
        itemPriceText = new javax.swing.JTextField();
        qtyOnHandText = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        itemCodeLabel = new javax.swing.JLabel();
        qtyOnHandLabel = new javax.swing.JLabel();
        unitPriceLabel = new javax.swing.JLabel();
        qtyLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        removeItemButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        totalAmountText = new javax.swing.JTextField();
        totalAmountLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setLayout(null);

        titleLabel.setFont(new java.awt.Font("Droid Sans", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Place New Order");
        add(titleLabel);
        titleLabel.setBounds(80, 0, 560, 45);

        cusIdLabel.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        cusIdLabel.setText("Customer Id");
        add(cusIdLabel);
        cusIdLabel.setBounds(20, 70, 107, 24);

        cusNameLabel.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        cusNameLabel.setText("Customer Name");
        add(cusNameLabel);
        cusNameLabel.setBounds(20, 120, 142, 24);

        customerIdComboBox.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        customerIdComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customerIdComboBoxItemStateChanged(evt);
            }
        });
        customerIdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIdComboBoxActionPerformed(evt);
            }
        });
        add(customerIdComboBox);
        customerIdComboBox.setBounds(170, 70, 110, 30);

        customerNameText.setEditable(false);
        customerNameText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        add(customerNameText);
        customerNameText.setBounds(170, 120, 180, 30);

        orderIdLabel.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        orderIdLabel.setText("Order ID");
        add(orderIdLabel);
        orderIdLabel.setBounds(420, 70, 93, 24);

        orderIdText.setEditable(false);
        orderIdText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        add(orderIdText);
        orderIdText.setBounds(530, 70, 100, 30);

        orderDateLabel.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        orderDateLabel.setText("Order Date");
        add(orderDateLabel);
        orderDateLabel.setBounds(420, 120, 95, 24);

        orderDateText.setEditable(false);
        orderDateText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        add(orderDateText);
        orderDateText.setBounds(530, 120, 140, 30);

        orderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Description", "Qty", "Unit Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetailTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(orderDetailTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 270, 680, 220);
        add(jSeparator1);
        jSeparator1.setBounds(0, 158, 740, 2);
        add(jSeparator2);
        jSeparator2.setBounds(0, 252, 740, 10);

        itemCodeComboBox.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        itemCodeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemCodeComboBoxItemStateChanged(evt);
            }
        });
        itemCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeComboBoxActionPerformed(evt);
            }
        });
        add(itemCodeComboBox);
        itemCodeComboBox.setBounds(20, 210, 90, 30);

        itemDescriptionText.setEditable(false);
        itemDescriptionText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        itemDescriptionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDescriptionTextActionPerformed(evt);
            }
        });
        add(itemDescriptionText);
        itemDescriptionText.setBounds(160, 210, 170, 30);

        qtyText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        qtyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyTextActionPerformed(evt);
            }
        });
        qtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyTextKeyTyped(evt);
            }
        });
        add(qtyText);
        qtyText.setBounds(350, 210, 64, 30);

        itemPriceText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        itemPriceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPriceTextActionPerformed(evt);
            }
        });
        add(itemPriceText);
        itemPriceText.setBounds(430, 210, 84, 30);

        qtyOnHandText.setEditable(false);
        qtyOnHandText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        qtyOnHandText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyOnHandTextActionPerformed(evt);
            }
        });
        add(qtyOnHandText);
        qtyOnHandText.setBounds(550, 210, 120, 30);

        backButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton);
        backButton.setBounds(20, 10, 110, 30);

        descriptionLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        descriptionLabel.setText("Description");
        add(descriptionLabel);
        descriptionLabel.setBounds(160, 180, 103, 20);

        itemCodeLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        itemCodeLabel.setText("Item Code");
        add(itemCodeLabel);
        itemCodeLabel.setBounds(20, 180, 94, 22);

        qtyOnHandLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        qtyOnHandLabel.setText("Qty On Hand");
        add(qtyOnHandLabel);
        qtyOnHandLabel.setBounds(550, 180, 115, 22);

        unitPriceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        unitPriceLabel.setText("Unit Price");
        add(unitPriceLabel);
        unitPriceLabel.setBounds(430, 180, 90, 22);

        qtyLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        qtyLabel.setText("Qty");
        add(qtyLabel);
        qtyLabel.setBounds(350, 180, 31, 22);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/modernPOS/images/PlaceOrder.jpg"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(90, 0, 570, 350);

        removeItemButton.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        removeItemButton.setText("Remove Item");
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });
        add(removeItemButton);
        removeItemButton.setBounds(100, 590, 170, 33);

        saveButton.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        saveButton.setText("Save & Print");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        add(saveButton);
        saveButton.setBounds(470, 590, 163, 33);

        totalAmountText.setEditable(false);
        totalAmountText.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        add(totalAmountText);
        totalAmountText.setBounds(540, 510, 130, 30);

        totalAmountLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalAmountLabel.setText("Total Amount");
        add(totalAmountLabel);
        totalAmountLabel.setBounds(400, 520, 130, 22);

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lk/modernPOS/images/white background.jpg"))); // NOI18N
        add(backgroundLabel);
        backgroundLabel.setBounds(0, 0, 740, 680);
    }// </editor-fold>//GEN-END:initComponents

    private void customerIdComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customerIdComboBoxItemStateChanged

    }//GEN-LAST:event_customerIdComboBoxItemStateChanged

    private void customerIdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerIdComboBoxActionPerformed
        try {
            CustomerDTO cus = new CustomerController().searchCustomer((String) customerIdComboBox.getSelectedItem());
            customerNameText.setText(cus.getName());
        } catch (Exception ex) {
            Logger.getLogger(PlaceOrderPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerIdComboBoxActionPerformed

    private void itemCodeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemCodeComboBoxItemStateChanged

    }//GEN-LAST:event_itemCodeComboBoxItemStateChanged

    private void itemCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeComboBoxActionPerformed
        try {
            ItemDTO it = new ItemController().searchItem((String) itemCodeComboBox.getSelectedItem());
            itemDescriptionText.setText(it.getDescription());
            qtyOnHandText.setText(String.valueOf(it.getQtyOnHand()));
            itemPriceText.setText(String.valueOf(it.getUnitPrice()));
        } catch (Exception ex) {
            Logger.getLogger(PlaceOrderPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
        qtyText.selectAll();
        qtyText.requestFocus();

    }//GEN-LAST:event_itemCodeComboBoxActionPerformed

    private void itemDescriptionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDescriptionTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemDescriptionTextActionPerformed

    private void qtyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyTextActionPerformed
        try{
            Integer.parseInt(qtyText.getText());

            itemPriceText.requestFocus();
            itemPriceText.selectAll();
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this,"Please enter a valid quantity!");
            qtyText.selectAll();
            return;
        }
        if(Integer.parseInt(qtyText.getText())>Integer.parseInt(qtyOnHandText.getText())){
            JOptionPane.showMessageDialog(this, "You only have "+qtyOnHandText.getText()+" on hand ! ");
            qtyText.requestFocus();
            qtyText.selectAll();
            return;
        }

    }//GEN-LAST:event_qtyTextActionPerformed

    private void qtyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyTextKeyTyped

    private void itemPriceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPriceTextActionPerformed
        try{
            if(Integer.parseInt(qtyText.getText().trim())==0){
                JOptionPane.showMessageDialog(this,"The quantity cannot be 0");
                qtyText.selectAll();
                qtyText.requestFocus();
                return;
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this,"Please enter a valid quantity ! ");
            qtyText.selectAll();
            qtyText.requestFocus();
            return ;
        }

        String itemCode=(String) itemCodeComboBox.getSelectedItem();
        String description=itemDescriptionText.getText();
        double unitPrice=0;
        int qty=Integer.parseInt(qtyText.getText());
        try{
            unitPrice=Double.parseDouble(itemPriceText.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this,"Please enter a valid amount!");
            itemPriceText.requestFocus();
            itemPriceText.selectAll();           
            return;
        }
        
        if(Integer.parseInt(qtyOnHandText.getText())>=qty){
            qtyOnHandText.setText(String.valueOf(Integer.parseInt(qtyOnHandText.getText())-Integer.parseInt(qtyText.getText())));
        }else{
            if(Integer.parseInt(qtyOnHandText.getText())==0){
                JOptionPane.showMessageDialog(this, "You have none of this product on hand ! ");
            }else{
                JOptionPane.showMessageDialog(this, "You only have "+qtyOnHandText.getText()+" on hand ! ");
            }
            qtyText.requestFocus();
            qtyText.selectAll();
            return;
        }
        double amount=unitPrice*qty;
        totalAmountText.setText(String.valueOf(amount+Double.parseDouble(totalAmountText.getText())));
        if(!checkForIdandUnitPrice(itemCode,unitPrice)){
            Object[] rowData={itemCode,description,qty,unitPrice,amount};
            DefaultTableModel dtm=(DefaultTableModel) orderDetailTable.getModel();
            dtm.addRow(rowData);
        }else{
            addTotal(itemCode,qty,unitPrice,amount);
        }
    }//GEN-LAST:event_itemPriceTextActionPerformed

    private void qtyOnHandTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyOnHandTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyOnHandTextActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(orderDetailTable.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "There must be items for an order !");
            return;
        }

        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are you sure to add this order ?");
        if(showConfirmDialog==1||showConfirmDialog==2){return;}
        try {
            ArrayList<ItemDTO> ar=new ArrayList<>();
            for(int x=0;x<orderDetailTable.getRowCount();x++){
                ar.add(new ItemDTO(String.valueOf(orderDetailTable.getValueAt(x,0)),String.valueOf(orderDetailTable.getValueAt(x,1)),
                    Double.parseDouble(String.valueOf(orderDetailTable.getValueAt(x,3))),
                    Integer.parseInt(String.valueOf(orderDetailTable.getValueAt(x,2)))));
        }
        boolean addOrder = new OrderController().addOrder(new CustomDTO(ar,orderDateText.getText(),String.valueOf(customerIdComboBox.getSelectedItem()),orderIdText.getText()));
    if(addOrder==true){
        JOptionPane.showMessageDialog(this,"Order added");
        }else{
            JOptionPane.showMessageDialog(this,"The order could not be added");
        }
        } catch (Exception ex) {
            Logger.getLogger(PlaceOrderPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            setOrderId();
            DefaultTableModel dtm=(DefaultTableModel) orderDetailTable.getModel();
            dtm.setRowCount(0);
        } catch (Exception ex) {
            Logger.getLogger(PlaceOrderPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        int selectedRow = orderDetailTable.getSelectedRow();
        DefaultTableModel dtm=(DefaultTableModel) orderDetailTable.getModel();
        try{
            double tot=Double.parseDouble(totalAmountText.getText())-Double.parseDouble(String.valueOf(dtm.getValueAt(selectedRow, 4)));
            int qty = Integer.parseInt(String.valueOf(dtm.getValueAt(selectedRow, 2)));
            qtyOnHandText.setText(String.valueOf(Integer.parseInt(qtyOnHandText.getText())+qty));
            dtm.removeRow(selectedRow);
            totalAmountText.setText(String.valueOf(tot));
        }catch(ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(this,"NO row selected!");
        }
    }//GEN-LAST:event_removeItemButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        MainFrame.getMp().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel cusIdLabel;
    private javax.swing.JLabel cusNameLabel;
    private javax.swing.JComboBox customerIdComboBox;
    private javax.swing.JTextField customerNameText;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JComboBox itemCodeComboBox;
    private javax.swing.JLabel itemCodeLabel;
    private javax.swing.JTextField itemDescriptionText;
    private javax.swing.JTextField itemPriceText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JTextField orderDateText;
    private javax.swing.JTable orderDetailTable;
    private javax.swing.JLabel orderIdLabel;
    private javax.swing.JTextField orderIdText;
    private javax.swing.JLabel qtyLabel;
    private javax.swing.JLabel qtyOnHandLabel;
    private javax.swing.JTextField qtyOnHandText;
    private javax.swing.JTextField qtyText;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel totalAmountLabel;
    private javax.swing.JTextField totalAmountText;
    private javax.swing.JLabel unitPriceLabel;
    // End of variables declaration//GEN-END:variables
     private void loadCustomerIds() throws NullPointerException{
        try {
            String[] ar = new CustomerController().getAllCustomerIds();//riscy code. throw an sql exception when connection fails.
            for (String a : ar) {
                customerIdComboBox.addItem(a);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            //Do nothing.
        }
    }

    private void loadItemCodes()  {
        try {
            String[] ar = new ItemController().getAllItemCodes();//riscy code. throw an sql exception when connection fails.
            for (String a : ar) {
                itemCodeComboBox.addItem(a);
            }
        } catch (Exception ex) {
            Logger.getLogger(PlaceOrderPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setDate() {
        orderDateText.setText(String.valueOf(LocalDate.now()));
    }

    private void setOrderId()  {
        Random r=new Random();
        String code=null;
        do{
            try {
                int x=r.nextInt(26)+65;
                char ch=(char)x;
                int z=r.nextInt(1000);
                switch(String.valueOf(z).length()){
                    case 1:code=ch+"00"+z;break;
                    case 2:code=ch+"0"+z ;break;
                    case 3:code=ch+""+z  ;break;
                }
                String[] atr = new OrderController().getAllOrderCodes();//riscy code. throw an sql exception when connection fails.
                for(String y:atr){
                    if(y==code){
                        code=null;
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(PlaceOrderPannel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }while(code==null);
	orderIdText.setText(code);
    }

    private boolean checkForIdandUnitPrice(String id,double unitPrice) {
        DefaultTableModel dtm=(DefaultTableModel) orderDetailTable.getModel();
        boolean hasCode=false;
        for(int x=0;x<dtm.getRowCount();x++){
            if(dtm.getValueAt(x,0)==id){
                hasCode=true;
                double price=Double.parseDouble(String.valueOf(dtm.getValueAt(x,3)));
                if(!(unitPrice==price)){hasCode=false;}
                if(hasCode==true){break;}
            }
        }
        return hasCode;
    }

    private void addTotal(String itemCode,int qty,double unitPrice,double amount) {
        DefaultTableModel dtm=(DefaultTableModel) orderDetailTable.getModel();
        for(int x=0;x<dtm.getRowCount();x++){
            if(dtm.getValueAt(x,0)==itemCode){
                if(Double.parseDouble(String.valueOf(dtm.getValueAt(x, 3)))==unitPrice){
                    qty+=Integer.parseInt(String.valueOf(dtm.getValueAt(x,2)));
                    dtm.setValueAt(qty, x, 2);
                    dtm.setValueAt(qty*unitPrice, x, 4);
                }
            }
        }
    }

    public void initialise() {
        try{
        loadCustomerIds();
        loadItemCodes();
        setOrderId();
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Please check your connection properties");
            MainFrame.getMp().setVisible(true);
            return;
        }
        MainFrame.getMp().setVisible(false);
        this.setVisible(true);
        setDate();
        totalAmountText.setText("0.0");
    }
}
